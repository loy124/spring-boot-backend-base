// 1. Import 추가
import com.sun.security.ntlm.Server
import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

// 2. buildscript 추가
buildscript {
	ext {
		restdocsApiSpecVersion = '0.18.2'
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	// 3. openAPI 플러그인 추가
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	// 4. swaggerUI 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.18.2'

}
// 5. 생성된 API 스펙이 어느 위치에 있는지 지정
swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}


// 6. openapi3 스펙 생성시 설정 정보
openapi3 {
    servers = [
            { url = "http://localhost:8080" }
    ]
    title = "Mincourse API 문서"
    description = "document.querySelectorAll(\"button[aria-expanded=true]\").forEach(li=>li.click());  "
    version = "0.0.1"
    format = "yaml"
}


group = 'mincodig.corporate'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

ext {
	set('springCloudVersion', "2022.0.3")
	snippetsDir = file('build/generated-snippets')
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	/* FeignClient 관련 */
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	//test lombok 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	// QueryDSL 설정
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// -- QueryDSL ---

//	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// 8. openAPI3 추가
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion
	// 9. SwaggerUI 추가
	swaggerUI 'org.webjars:swagger-ui:4.11.1'

	// https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker
	implementation group: 'com.itextpdf.tool', name: 'xmlworker', version: '5.5.13.3'
	// https://mvnrepository.com/artifact/com.itextpdf/itextpdf
	implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13.3'

	// https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'


}

// 10. openapi3가 먼저 실행 - doFrist를 통한 Header 설정
tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
				                      "    CookieAuth:\n" + \
                                      "      type: apiKey\n" + \
                                      "      name: refresh_token\n" + \
                                      "      in: cookie\n" + \
                                      "security:\n" +
                                      "  - APIKey: []  # Apply the security scheme here"
                                      "  - CookieAuth: []  # Apply the CookieAuth security scheme here"

		swaggerUIFile.append securitySchemesContent
	}
}


test {
	outputs.dir snippetsDir
}

asciidoctor {
	configurations 'asciidoctorExt' // (7)
	baseDirFollowsSourceFile() // (8)
	inputs.dir snippetsDir // (9)
	dependsOn test // (10)
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')  // (11)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyDocument(type: Copy) { // (12)
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

def generatedJavaSrcDir = 'src/main/generated'
def queryDslOutput = file(generatedJavaSrcDir) as Object

clean {
	delete queryDslOutput
}


bootJar{
	archivesBaseName = 'mincourse'
	archiveFileName = 'mincourse.jar'
	archiveVersion = "0.0.1"
//	dependsOn asciidoctor
//	from ("${asciidoctor.outputDir}/html5") {
//		into 'static/docs'
//	}
	dependsOn generateSwaggerUISample

	from("${generateSwaggerUISample.outputDir}") {
		into 'static/docs'
	}
}